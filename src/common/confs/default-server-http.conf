server {

	# reason variable
	set $reason '';

	server_name _;

	# HTTP listen
{% if LISTEN_HTTP == "yes" +%}
	listen 0.0.0.0:{{ HTTP_PORT }} default_server {% if USE_PROXY_PROTOCOL == "yes" %}proxy_protocol{% endif %};
{% endif %}

	# HTTPS listen
{% set os = import("os") %}
{% if os.path.isfile("/var/cache/bunkerweb/default-server-cert/cert.pem") +%}
	{% if has_variable(all, "USE_CUSTOM_SSL", "yes") or has_variable(all, "AUTO_LETS_ENCRYPT", "yes") or has_variable(all, "GENERATE_SELF_SIGNED_SSL", "yes") +%}
	listen 0.0.0.0:{{ HTTPS_PORT }} ssl {% if HTTP2 == "yes" %}http2{% endif %} default_server {% if USE_PROXY_PROTOCOL == "yes" %}proxy_protocol{% endif %};
	ssl_certificate /var/cache/bunkerweb/default-server-cert/cert.pem;
	ssl_certificate_key /var/cache/bunkerweb/default-server-cert/cert.key;
	{% endif %}
{% endif %}

{% if IS_LOADING == "yes" +%}
	root /usr/share/bunkerweb/loading;
	index index.html;
{% endif %}

	# include core and plugins default-server configurations
	include /etc/nginx/default-server-http/*.conf;
	
	# include custom default-server configurations
	include /etc/bunkerweb/configs/default-server-http/*.conf;

	log_by_lua_block {

		local utils			= require "bunkerweb.utils"
		local clogger		= require "bunkerweb.logger"
		local cdatastore	= require "bunkerweb.datastore"
		local helpers		= require "bunkerweb.helpers"
		local cjson			= require "cjson"

		-- Start log phase
		local logger	= clogger:new("LOG-DEFAULT")
		local datastore	= cdatastore:new()
		logger:log(ngx.INFO, "log_default phase started")

		-- Get plugins
		local plugins, err = datastore:get("plugins")
		if not plugins then
			logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
			return false
		end
		plugins = cjson.decode(plugins)

		-- Call log_default() methods
		logger:log(ngx.INFO, "calling log_default() methods of plugins ...")
		for i, plugin in ipairs(plugins) do
			-- Require call
			local plugin_lua, err = helpers.require_plugin(plugin.id)
			if plugin_lua == false then
				logger:log(ngx.ERR, err)
			elseif plugin_lua == nil then
				logger:log(ngx.INFO, err)
			else
				-- Check if plugin has log method
				if plugin_lua.log_default ~= nil then
					-- New call
					local ok, plugin_obj = helpers.new_plugin(plugin_lua)
					if not ok then
						logger:log(ngx.ERR, plugin_obj)
					else
						local ok, ret = helpers.call_plugin(plugin_obj, "log")
						if not ok then
							logger:log(ngx.ERR, ret)
						else
							logger:log(ngx.INFO, plugin.id .. ":log_default() call successful : " .. ret.msg)
						end
					end
				else
					logger:log(ngx.INFO, "skipped execution of " .. plugin.id .. " because method log_default() is not defined")
				end
			end
		end
		logger:log(ngx.INFO, "called log_default() methods of plugins")

		-- Display reason at info level
		if ngx.ctx.reason then
			logger:log(ngx.INFO, "client was denied with reason : " .. reason)
		end

		logger:log(ngx.INFO, "log_default phase ended")

	}

}
