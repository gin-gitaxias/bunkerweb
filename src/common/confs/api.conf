server {
	server_name {{ API_SERVER_NAME }};
	
	# HTTP listen
	listen {{ API_LISTEN_IP }}:{{ API_HTTP_PORT }};
{% if API_LISTEN_IP != "127.0.0.1" +%}
	listen 127.0.0.1:{{ API_HTTP_PORT }};
{% endif +%}

	# maximum body size for API
	client_max_body_size 1G;

	# default mime type is JSON
	default_type 'application/json';

	# check IP and do the API call
	access_by_lua_block {
		local capi		= require "bunkerweb.api"
		local clogger	= require "bunkerweb.logger"
		local logger	= clogger:new("API")
		local api		= capi:new()
		if not ngx.var.http_host or ngx.var.http_host ~= "{{ API_SERVER_NAME }}" then
			logger:log(ngx.WARN, "wrong Host header from IP " .. ngx.var.remote_addr)
			return ngx.exit(ngx.HTTP_CLOSE)
		end
		local ok, err	= api:is_allowed_ip()
		if not ok then
			logger:log(ngx.WARN, "can't validate access from IP " .. ngx.var.remote_addr .. " : " .. err)
			return ngx.exit(ngx.HTTP_CLOSE)
		end
		logger:log(ngx.NOTICE, "validated access from IP " .. ngx.var.remote_addr)
		local ok, err, status, resp = api:do_api_call()
		if not ok then
			logger:log(ngx.WARN, "call from " .. ngx.var.remote_addr .. " on " .. ngx.var.uri .. " failed : " .. err)
		else
			logger:log(ngx.NOTICE, "successful call from " .. ngx.var.remote_addr .. " on " .. ngx.var.uri .. " : " .. err)
		end
		ngx.status = status
		ngx.say(resp)
		return ngx.exit(status)
	}
}
