log_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local cdatastore	= require "bunkerweb.datastore"
local cjson			= require "cjson"

-- Start log phase
local logger	= clogger:new("LOG")
local datastore	= cdatastore:new()
logger:log(ngx.INFO, "log phase started")

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end
plugins = cjson.decode(plugins)

-- Call log() methods
logger:log(ngx.INFO, "calling log() methods of plugins ...")
for i, plugin in ipairs(plugins) do
	-- Require call
	local plugin_lua, err = helpers.require_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	elseif plugin_lua == nil then
		logger:log(ngx.INFO, err)
	else
		-- Check if plugin has log method
		if plugin_lua.log ~= nil then
			-- New call
			local ok, plugin_obj = helpers.new_plugin(plugin_lua)
			if not ok then
				logger:log(ngx.ERR, plugin_obj)
			else
				local ok, ret = helpers.call_plugin(plugin_obj, "log")
				if not ok then
					logger:log(ngx.ERR, ret)
				else
					logger:log(ngx.INFO, plugin.id .. ":log() call successful : " .. ret.msg)
				end
			end
		else
			logger:log(ngx.INFO, "skipped execution of " .. plugin.id .. " because method log() is not defined")
		end
	end
end
logger:log(ngx.INFO, "called log() methods of plugins")

-- Display reason at info level
if ngx.ctx.reason then
	logger:log(ngx.INFO, "client was denied with reason : " .. reason)
end

logger:log(ngx.INFO, "log phase ended")

}