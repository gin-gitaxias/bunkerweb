access_by_lua_block {

local class     	= require "middleclass"
local clogger		= require "bunkerweb.logger"
local helpers		= require "bunkerweb.helpers"
local utils			= require "bunkerweb.utils"
local cdatastore	= require "bunkerweb.datastore"
local ccachestore	= require "bunkerweb.cachestore"
local cjson			= require "cjson"

-- Don't process internal requests
local logger = clogger:new("ACCESS")
if ngx.req.is_internal() then
	logger:log(ngx.INFO, "skipped access phase because request is internal")
	return true
end

-- Start access phase
local datastore = cdatastore:new()
local use_redis, err = utils.get_variable("USE_REDIS", false)
if not use_redis then
	logger:log(ngx.ERR, err)
end
local cachestore = ccachestore:new(use_redis == "yes")
logger:log(ngx.INFO, "access phase started")

-- Update cachestore only once and before any other code
local ok, err = cachestore.cache:update()
if not ok then
	logger:log(ngx.ERR, "can't update cachestore : " .. err)
end

-- Process bans as soon as possible
local ok, reason = datastore:get("bans_ip_" .. ngx.var.remote_addr)
if not ok and reason then
	logger:log(ngx.INFO, "error while checking if client is banned : " .. reason)
	return false
elseif reason then
	logger:log(ngx.WARN, "IP " .. ngx.var.remote_addr .. " is banned with reason : " .. reason)
	return ngx.exit(utils.get_deny_status())
end

-- Get plugins
local plugins, err = datastore:get("plugins")
if not plugins then
	logger:log(ngx.ERR, "can't get plugins from datastore : " .. err)
	return false
end
plugins = cjson.decode(plugins)

-- Call access() methods
logger:log(ngx.INFO, "calling access() methods of plugins ...")
for i, plugin in ipairs(plugins) do
	-- Require call
	local plugin_lua, err = helpers.require_plugin(plugin.id)
	if plugin_lua == false then
		logger:log(ngx.ERR, err)
	elseif plugin_lua == nil then
		logger:log(ngx.INFO, err)
	else
		-- Check if plugin has access method
		if plugin_lua.access ~= nil then
			-- New call
			local ok, plugin_obj = helpers.new_plugin(plugin_lua)
			if not ok then
				logger:log(ngx.ERR, plugin_obj)
			else
				local ok, ret = helpers.call_plugin(plugin_obj, "access")
				if not ok then
					logger:log(ngx.ERR, ret)
				else
					logger:log(ngx.INFO, plugin.id .. ":access() call successful : " .. ret.msg)
				end
				if ret.status then
					if ret.status == utils.get_deny_status() then
						ngx.ctx.reason = plugin.id
						logger:log(ngx.WARN, "denied access from " .. plugin.id .. " : " .. err)
					else
						logger:log(ngx.NOTICE, plugin.id .. " returned status " .. tostring(ret.status) .. " : " .. err)
					end
					ngx.ctx.status = ret.status
					break
				elseif ret.redirect then
					logger:log(ngx.NOTICE, plugin.id .. " redirect to " .. ret.redirect .. " : " .. err)
					ngx.ctx.redirect = ret.redirect
					break
				end
			end
		else
			logger:log(ngx.INFO, "skipped execution of " .. plugin.id .. " because method access() is not defined")
		end
	end
end
logger:log(ngx.INFO, "called access() methods of plugins")

-- Save session if needed
local ok, err = utils.save_session()
if not ok then
	logger:log(ngx.ERR, "can't save session : " .. err)
end

logger:log(ngx.INFO, "access phase ended")

-- Return status if needed
if ngx.ctx.status then
	return ngx.exit(ngx.ctx.status)
end

-- Redirect if needed
if ngx.ctx.redirect then
	return ngx.redirect(ngx.ctx.redirect)
end

return true

}